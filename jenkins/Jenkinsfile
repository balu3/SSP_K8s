def settings() {
    [
            'kubectlImage' : 'ssp25/ssp-kubectl:L1',
            'slackChannel' : 'devops-hyd-test',
            'slackChannelError' : 'devops-hyd-test'
    ]
}

def branchAndBuildTag() {
    return "${env.BRANCH_NAME}${env.BUILD_NUMBER}"
}

def branchTag() {
    return "${env.BRANCH_NAME}"
}

def deploymentUpdateSspWebNode(context, namespace, newVersion) {
    def cmd = "kubectl set image deployment/stupid-node-deployment stupid-node-deployment=${newVersion} --context=${context} --namespace=${namespace}"
    notify(cmd)

  //  sh "delivery/pearl-squad/artisan-mobile-bff/env/reload-secret.sh ${namespace} ${context}"

    sh cmd
}


def doBuild() {
def settings = settings()
//cluster settings
 //def clusterSettings = readYaml file: 'jenkins/cluster.yaml'
 //def context = clusterSettings.context
 //def namespace = clusterSettings.namespace
 def context
 def namespace
 context: 'minikube'
 namespace: 'ssp-dev'
 image: 'ssp25/web-node'
 //branchTag: branchTag()
 //branchBTag: branchAndBuildTag()



stage('build') {
 //def image = docker.build("ssp25/ssp-web-node")
 sh " cd $WORKSPACE"
 sh "/usr/local/bin/docker build -t ssp25/ssp-web-node:${branchAndBuildTag()} ."
 sh "/usr/local/bin/docker build -t ssp25/ssp-web-node:${branchTag()} ."
 sh "/usr/local/bin/docker push ssp25/ssp-web-node:${branchAndBuildTag()}"
 sh "/usr/local/bin/docker push ssp25/ssp-web-node:${branchTag()}"

 //image.push(branchTag())
 //image.push(branchAndBuildTag())
}

if('develop' == branchTag()) {
 stage('deploy') {
     docker.image(settings.kubectlImage).inside {
       deploymentUpdateSspWebNode(context, namespace, "ssp25/ssp-web-node:${branchAndBuildTag()}")
     }
 }
}
}

/*
COMMONS JOB TEMPLATE V0.1 (subdirectoryCheckout, scmFirst)
SEE: DevOps-chapter/delivery
 */
node ('ssp-mac') {
     deleteDir()

    try {

      stage("Code Checkout")
        {
        checkout scm
        //delivery = load 'jenkins/mobile.groovy'
        }

    //   notify("Starting")
        withCredentials([usernamePassword(credentialsId: 'ssp-docker-hub', passwordVariable: 'dockerhubPass', usernameVariable: 'dockerhubUser')]) {
            sh "/usr/local/bin/docker login -u ${dockerhubUser} -p ${dockerhubPass}"
        }

  doBuild() // You implement doBuild

//     notify("SUCCESS")
    } catch (e) {
        currentBuild.result = "FAILED"
        echo "${e.getClass().getName()} - ${e.getMessage()}"
  //  notifyFailure("${e.getClass().getName()} - ${e.getMessage()}")
        throw e
    }
}
/*
END COMMONS JOB TEMPLATE
 */
